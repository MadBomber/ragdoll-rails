# This migration comes from ragdoll (originally 20250218123456)
# Creates the core documents table for the Ragdoll RAG (Retrieval-Augmented Generation) system.
# This table stores document metadata, content, and processing status information.
class CreateRagdollDocuments < ActiveRecord::Migration[8.0]
  def change
    # Enable PostgreSQL extensions required for advanced text processing and vector operations
    enable_extension 'pg_trgm' unless extension_enabled?('pg_trgm')        # Trigram matching for fuzzy text search
    enable_extension 'fuzzystrmatch' unless extension_enabled?('fuzzystrmatch') # Fuzzy string matching algorithms
    enable_extension 'vector' unless extension_enabled?('vector')          # Vector operations for embedding similarity

    create_table :ragdoll_documents, comment: 'Core documents table storing files and content for RAG processing. Each row represents a document that can be chunked into embeddings for semantic search and AI retrieval.' do |t|
      # File system reference - where the original document is stored
      t.string :location, null: false, comment: 'File system path or URL to the original document. Required field that uniquely identifies the source location of the document for re-processing or reference.'
      
      # Document content and derived data
      t.text :content, comment: 'Full extracted text content of the document. This is the raw text that will be chunked and embedded for semantic search. May be large for documents like PDFs or web pages.'
      t.text :summary, comment: 'AI-generated summary of the document content. Created during processing to provide quick overviews and improve search relevance. Generated by summarization models.'
      
      # Document classification and metadata
      t.string :document_type, comment: 'Classification of the document type (e.g., "pdf", "text", "markdown", "html"). Used for applying type-specific processing rules and display formatting.'
      t.string :title, comment: 'Human-readable title of the document. May be extracted from filename, document metadata, or content analysis. Used for display and identification purposes.'
      t.string :source_type, comment: 'Origin source of the document (e.g., "file", "url", "api", "upload"). Helps track how the document entered the system for auditing and re-processing.'
      
      # Chunking configuration - controls how document is split for embedding
      t.integer :chunk_size, comment: 'Number of characters per chunk when splitting document for embedding. Larger chunks capture more context but may exceed model limits. Typical values: 500-2000 characters.'
      t.integer :chunk_overlap, comment: 'Number of characters to overlap between consecutive chunks. Prevents context loss at chunk boundaries. Typically 10-20% of chunk_size to maintain coherence.'
      
      # Flexible metadata storage for document-specific information
      t.jsonb :metadata, default: {}, comment: 'Flexible JSON storage for document-specific metadata such as author, creation date, file size, extraction settings, or custom tags. Indexed with GIN for efficient querying.'
      
      # Processing lifecycle tracking
      t.datetime :processing_started_at, comment: 'Timestamp when document processing (chunking and embedding generation) began. Used for monitoring processing duration and identifying stuck jobs.'
      t.datetime :processing_finished_at, comment: 'Timestamp when document processing completed successfully or failed. Used with started_at to calculate processing time and identify performance issues.'
      t.string :status, default: 'pending', comment: 'Current processing status of the document. Values: "pending" (not yet processed), "processing" (currently being processed), "processed" (successfully completed), "failed" (processing error occurred). Used for job queue management and user feedback.'

      # Standard Rails timestamps for audit trails
      t.timestamps comment: 'Standard Rails created_at and updated_at timestamps for tracking when document records are created and modified in the database.'
    end

    # Indexes for performance optimization
    add_index :ragdoll_documents, :location, unique: true, comment: 'Unique constraint on location prevents duplicate documents and enables fast lookups by file path or URL'
    add_index :ragdoll_documents, :document_type, comment: 'Index for filtering documents by type, commonly used in admin interfaces and type-specific processing queries'
    add_index :ragdoll_documents, :status, comment: 'Index for filtering by processing status, critical for job queue management and monitoring dashboard queries'
    add_index :ragdoll_documents, :metadata, using: :gin, comment: 'GIN index on JSONB metadata field enables efficient queries on nested JSON properties and full-text search within metadata'
    add_index :ragdoll_documents, :processing_started_at, comment: 'Index for sorting and filtering by processing start time, used for monitoring processing queues and performance analysis'
  end
end
