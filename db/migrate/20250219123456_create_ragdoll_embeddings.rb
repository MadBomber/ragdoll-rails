# Creates the embeddings table for storing document chunks and their vector representations.
# This table is the core of the RAG system's semantic search capabilities.
class CreateRagdollEmbeddings < ActiveRecord::Migration[8.0]
  def change
    create_table :ragdoll_embeddings, comment: 'Stores document chunks and their vector embeddings for semantic search. Each row represents a chunk of text from a document along with its AI-generated vector representation for similarity matching.' do |t|
      # Parent document reference - establishes the chunk-to-document relationship
      t.references :document, null: false, foreign_key: { to_table: :ragdoll_documents }, comment: 'Foreign key reference to the parent document in ragdoll_documents table. Required field that links each chunk back to its source document for context and retrieval.'
      
      # The actual text content of this chunk
      t.text :content, null: false, comment: 'The actual text content of this chunk extracted from the parent document. Required field containing the text that will be used for semantic matching and returned in search results. Typically 500-2000 characters.'
      
      # Vector embedding for semantic search (pgvector format for optimal similarity calculations)
      t.vector :embedding, limit: 1536, comment: 'High-dimensional vector representation of the content generated by AI embedding models. Stored in pgvector format for efficient cosine similarity calculations. Dimension typically 1536 for OpenAI models.'
      
      # Model identification for compatibility and reprocessing
      t.string :model_name, comment: 'Name or identifier of the AI model used to generate this embedding (e.g., "text-embedding-3-small", "sentence-transformers/all-MiniLM-L6-v2"). Critical for ensuring embedding compatibility during search operations.'
      
      # Token usage tracking for cost analysis and optimization
      t.integer :token_count, comment: 'Number of tokens consumed by the AI model when generating this embedding. Used for cost tracking, billing analysis, and optimizing chunk sizes to minimize API costs while maintaining quality.'
      
      # Chunk ordering within the parent document
      t.integer :chunk_index, comment: 'Sequential position of this chunk within the parent document (0-based). Used for maintaining document order, reconstructing original text flow, and providing contextual information in search results.'
      
      # Flexible storage for chunk-specific metadata
      t.jsonb :metadata, default: {}, comment: 'Flexible JSON storage for chunk-specific metadata such as section headers, page numbers, processing parameters, or semantic tags. Indexed with GIN for efficient querying of nested properties.'
      
      # Classification of embedding content type
      t.string :embedding_type, default: 'text', comment: 'Type of content that was embedded (e.g., "text", "code", "table", "heading"). Allows for type-specific search strategies and filtering. Default "text" covers most document content.'

      # Standard Rails timestamps for audit trails
      t.timestamps comment: 'Standard Rails created_at and updated_at timestamps for tracking when embedding records are created and modified. Critical for debugging and performance analysis.'
    end

    # Performance indexes for efficient querying
    add_index :ragdoll_embeddings, :document_id, comment: 'Index for efficiently retrieving all chunks belonging to a specific document. Essential for document reprocessing and chunk management operations.'
    add_index :ragdoll_embeddings, :chunk_index, comment: 'Index for sorting chunks by their position within documents. Used for maintaining document order and providing sequential context in search results.'
    add_index :ragdoll_embeddings, :embedding_type, comment: 'Index for filtering embeddings by content type. Enables type-specific search strategies (e.g., searching only code chunks or headings) and analytics on content distribution.'
    add_index :ragdoll_embeddings, :metadata, using: :gin, comment: 'GIN index on JSONB metadata field enables efficient queries on nested JSON properties and supports complex filtering on chunk-specific attributes.'
    add_index :ragdoll_embeddings, :embedding, using: :hnsw, opclass: :vector_cosine_ops, comment: 'Hierarchical Navigable Small World (HNSW) index optimized for cosine similarity searches on vector embeddings. Critical for fast semantic search performance at scale.'
  end
end