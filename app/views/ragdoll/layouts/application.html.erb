<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "Ragdoll Engine" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <meta name="csrf-token" content="<%= form_authenticity_token %>">

    <%= yield :head %>

    <%= favicon_link_tag "ragdoll.png", type: "image/png" %>
    <%= favicon_link_tag "ragdoll.png", rel: "apple-touch-icon" %>
    
    <!-- Fallback CSS for when CDN is blocked -->
    <style>
      /* Basic Bootstrap-like styles for when CDN fails */
      .container { max-width: 1200px; margin: 0 auto; padding: 0 15px; }
      .row { display: flex; flex-wrap: wrap; margin: 0 -15px; }
      .col-md-8 { flex: 0 0 66.666667%; max-width: 66.666667%; padding: 0 15px; }
      .col-md-4 { flex: 0 0 33.333333%; max-width: 33.333333%; padding: 0 15px; }
      .col-12 { flex: 0 0 100%; max-width: 100%; padding: 0 15px; }
      .card { border: 1px solid #dee2e6; border-radius: 0.375rem; margin-bottom: 1rem; }
      .card-header { padding: 0.75rem 1.25rem; background-color: #f8f9fa; border-bottom: 1px solid #dee2e6; }
      .card-body { padding: 1.25rem; }
      .btn { display: inline-block; padding: 0.375rem 0.75rem; font-size: 1rem; line-height: 1.5; border-radius: 0.375rem; border: 1px solid; text-decoration: none; cursor: pointer; }
      .btn-primary { color: #fff; background-color: #007bff; border-color: #007bff; }
      .btn-outline-secondary { color: #6c757d; border-color: #6c757d; background-color: transparent; }
      .alert { padding: 0.75rem 1.25rem; margin-bottom: 1rem; border: 1px solid; border-radius: 0.375rem; }
      .alert-success { color: #155724; background-color: #d4edda; border-color: #c3e6cb; }
      .alert-danger { color: #721c24; background-color: #f8d7da; border-color: #f5c6cb; }
      .alert-info { color: #0c5460; background-color: #d1ecf1; border-color: #bee5eb; }
      .form-control { display: block; width: 100%; padding: 0.375rem 0.75rem; font-size: 1rem; line-height: 1.5; border: 1px solid #ced4da; border-radius: 0.375rem; }
      .mb-3 { margin-bottom: 1rem !important; }
      .mt-4 { margin-top: 1.5rem !important; }
      .navbar { padding: 0.5rem 0; background-color: #007bff !important; }
      .navbar-brand { color: #fff !important; text-decoration: none; font-weight: bold; }
      .nav-link { color: #fff !important; text-decoration: none; padding: 0.5rem 1rem; }
      .progress { height: 1rem; background-color: #e9ecef; border-radius: 0.375rem; overflow: hidden; }
      .progress-bar { height: 100%; background-color: #007bff; transition: width 0.3s ease; }
      .text-center { text-align: center !important; }
      .d-none { display: none !important; }
      .d-block { display: block !important; }
    </style>
    
    <!-- Try to load CDN resources with fallback detection -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    
    <!-- ActionCable from CDN with fallback handling -->
    <script src="https://cdn.jsdelivr.net/gh/rails/rails@7-1-stable/actioncable/app/assets/javascripts/action_cable.js"></script>
    
  </head>

  <body>
    <%= render Ragdoll::NavbarComponent.new %>

    <div class="container mt-4">
      <%= render Ragdoll::FlashMessagesComponent.new(flash: flash) %>

      <%= yield %>
    </div>

    <footer class="mt-5 py-3 text-center text-muted border-top">
      <small>Ragdoll Engine - <%= ::Ragdoll.version.join(' | ') %></small>
    </footer>

    <!-- JavaScript with fallback support -->
    <script>
      // Check if CDN resources loaded, provide fallbacks if not
      console.log('üîß Checking JavaScript dependencies...');
      
      // Wait a moment for Bootstrap to load from CDN, then set up fallback
      setTimeout(function() {
        if (typeof bootstrap === 'undefined') {
          console.warn('Bootstrap JS not loaded from CDN, using fallback');
        window.bootstrap = {
          Tab: function(element) {
            return {
              show: function() {
                // Simple tab switching fallback
                document.querySelectorAll('.tab-pane').forEach(pane => {
                  pane.style.display = 'none';
                  pane.classList.remove('show', 'active');
                });
                document.querySelectorAll('.nav-link').forEach(link => {
                  link.classList.remove('active');
                });
                element.classList.add('active');
                const target = element.getAttribute('href');
                if (target) {
                  const targetPane = document.querySelector(target);
                  if (targetPane) {
                    targetPane.style.display = 'block';
                    targetPane.classList.add('show', 'active');
                  }
                }
              }
            };
          }
        };
        
          // Add click handlers for tabs
          document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('[data-bs-toggle="tab"]').forEach(tab => {
              tab.addEventListener('click', function(e) {
                e.preventDefault();
                bootstrap.Tab(this).show();
              });
            });
          });
        } else {
          console.log('‚úÖ Bootstrap loaded from CDN');
        }
      }, 100); // End of setTimeout
      
      // ActionCable fallback and App global setup
      window.App = window.App || {};
      
      if (typeof ActionCable === 'undefined') {
        console.warn('ActionCable not loaded from CDN, using minimal fallback');
        window.ActionCable = {
          createConsumer: function(url) {
            console.log('ActionCable fallback: WebSocket functionality disabled');
            return {
              subscriptions: {
                create: function(channel, callbacks) {
                  console.log('ActionCable fallback: Channel subscription disabled', channel);
                  if (callbacks && callbacks.connected) {
                    setTimeout(() => callbacks.connected(), 100);
                  }
                  return {
                    unsubscribe: function() { console.log('ActionCable fallback: Unsubscribe'); }
                  };
                }
              },
              disconnect: function() { console.log('ActionCable fallback: Disconnect'); }
            };
          }
        };
      } else {
        console.log('‚úÖ ActionCable loaded from CDN');
      }
      
      // Ensure App.cable is available regardless of loading method
      if (!window.App) {
        window.App = {};
      }
      
      if (typeof ActionCable !== 'undefined' && !window.App.cable) {
        try {
          window.App.cable = ActionCable.createConsumer('/cable');
          console.log('‚úÖ App.cable initialized from CDN ActionCable');
          console.log('‚úÖ App.cable consumer ready:', window.App.cable);
        } catch (e) {
          console.error('‚ùå Failed to initialize App.cable:', e);
        }
      } else if (window.App.cable) {
        console.log('‚úÖ App.cable already initialized');
      }
      
      console.log('üöÄ JavaScript dependencies check complete');
      
      // Additional CDN loading diagnostics
      console.log('üìä CDN Resource Status:');
      console.log('- ActionCable CDN loaded:', typeof ActionCable !== 'undefined');
      console.log('- Bootstrap CDN loaded:', typeof bootstrap !== 'undefined');
      console.log('- Chart.js CDN loaded:', typeof Chart !== 'undefined');
      
      // Test network access to CDN
      const testImg = new Image();
      testImg.onload = () => console.log('‚úÖ CDN network access working');
      testImg.onerror = () => console.log('‚ùå CDN network access blocked');
      testImg.src = 'https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css';
      
      console.log('üîß Fallback system status:');
      console.log('- ActionCable fallback:', window.ActionCable ? 'active' : 'inactive');
      console.log('- Bootstrap fallback:', window.bootstrap ? 'active' : 'inactive');
    </script>
    
    <!-- Try to load CDN Bootstrap with fallback detection -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <%= yield :javascript if content_for?(:javascript) %>
  </body>
</html>